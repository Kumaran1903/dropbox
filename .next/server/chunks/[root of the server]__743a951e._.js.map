{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumar/OneDrive/Desktop/dropbox/src/lib/auth.js"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport Google from \"next-auth/providers/google\";\r\n\r\nexport const { handlers, signIn, signOut, auth } = NextAuth({\r\n  providers: [\r\n    Google({\r\n      clientId: process.env.GOOGLE_CLIENT_ID,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n    }),\r\n  ],\r\n});\r\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,uJAAA,CAAA,UAAQ,AAAD,EAAE;IAC1D,WAAW;QACT,CAAA,GAAA,uJAAA,CAAA,UAAM,AAAD,EAAE;YACL,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;AACH","debugId":null}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumar/OneDrive/Desktop/dropbox/src/app/api/upload-url/route.js"],"sourcesContent":["import { auth } from \"@/lib/auth\";\r\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\r\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const session = await auth(); // This is your auth method\r\n\r\n    if (!session || !session.user) {\r\n      return Response.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    const body = await req.json();\r\n    const { fileName, fileType } = body;\r\n\r\n    if (!fileName || !fileType) {\r\n      return Response.json(\r\n        { error: \"Missing fileName or fileType\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id || session.user.email; // Use user ID or email for folder\r\n\r\n    const s3 = new S3Client({\r\n      region: process.env.AWS_REGION,\r\n      credentials: {\r\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID,\r\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\r\n      },\r\n    });\r\n\r\n    const key = `${userId}/${fileName}`;\r\n\r\n    const params = {\r\n      Bucket: process.env.AWS_BUCKET_NAME,\r\n      Key: key,\r\n      ContentType: fileType,\r\n    };\r\n\r\n    const uploadUrl = await getSignedUrl(s3, new PutObjectCommand(params), {\r\n      expiresIn: 60,\r\n    });\r\n\r\n    return Response.json({ uploadUrl }, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Upload URL Error:\", error);\r\n    return Response.json(\r\n      { error: \"Failed to generate URL\", details: error.message },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAAA;;;;AAEO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,oHAAA,CAAA,OAAI,AAAD,KAAK,2BAA2B;QAEzD,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,EAAE;YAC7B,OAAO,SAAS,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QAChE;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAE/B,IAAI,CAAC,YAAY,CAAC,UAAU;YAC1B,OAAO,SAAS,IAAI,CAClB;gBAAE,OAAO;YAA+B,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,QAAQ,IAAI,CAAC,EAAE,IAAI,QAAQ,IAAI,CAAC,KAAK,EAAE,kCAAkC;QAExF,MAAM,KAAK,IAAI,iJAAA,CAAA,WAAQ,CAAC;YACtB,QAAQ,QAAQ,GAAG,CAAC,UAAU;YAC9B,aAAa;gBACX,aAAa,QAAQ,GAAG,CAAC,iBAAiB;gBAC1C,iBAAiB,QAAQ,GAAG,CAAC,qBAAqB;YACpD;QACF;QAEA,MAAM,MAAM,GAAG,OAAO,CAAC,EAAE,UAAU;QAEnC,MAAM,SAAS;YACb,QAAQ,QAAQ,GAAG,CAAC,eAAe;YACnC,KAAK;YACL,aAAa;QACf;QAEA,MAAM,YAAY,MAAM,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAE,IAAI,IAAI,iJAAA,CAAA,mBAAgB,CAAC,SAAS;YACrE,WAAW;QACb;QAEA,OAAO,SAAS,IAAI,CAAC;YAAE;QAAU,GAAG;YAAE,QAAQ;QAAI;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,SAAS,IAAI,CAClB;YAAE,OAAO;YAA0B,SAAS,MAAM,OAAO;QAAC,GAC1D;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}